AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Recipe API with JWT Authentication

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.12
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref RecipesTable
        S3_BUCKET: !Ref RecipeImagesBucket
        LOG_LEVEL: INFO
        USER_POOL_ID: !Ref UserPool
        USER_POOL_CLIENT_ID: !Ref UserPoolClient
  Api:
    Auth:
      DefaultAuthorizer: JWTAuthorizer
      Authorizers:
        JWTAuthorizer:
          UserPoolArn: !GetAtt UserPool.Arn
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
      AllowCredentials: "'*'"

Parameters:
  CognitoDomainPrefix:
    Type: String
    Default: recipe-api
    Description: Prefix for Cognito hosted UI domain

Resources:
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub recipe-api-deployment-${AWS::StackName}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpirationInDays: 30

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: !Sub |
            Your username is {username} and temporary password is {####}.
          EmailSubject: Welcome To The A+P Menu!
      Schema:
        - Name: email
          Required: true
          Mutable: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      AutoVerifiedAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${AWS::StackName}-client
      GenerateSecret: false
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - https://http://localhost:5173/callback
      LogoutURLs:
        - http://localhost:5173
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED


  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${CognitoDomainPrefix}-${AWS::StackName}
      UserPoolId: !Ref UserPool

  RecipeAPI:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Layers:
        - !Ref PythonDependenciesLayer
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: !Ref RecipesTable
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecipesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            Auth:
              Authorizer: JWTAuthorizer

  RecipesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: recipes
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  RecipeImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub recipe-images-${AWS::StackName}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ApiDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: CloudFront distribution for Recipe API
        DefaultCacheBehavior:
          TargetOriginId: ApiOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: true
            Headers:
              - Authorization
              - Origin
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
            Cookies:
              Forward: all
          MinTTL: 0
          DefaultTTL: 0
          MaxTTL: 0
        Origins:
          - Id: ApiOrigin
            DomainName: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
            OriginPath: /api
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
        DefaultRootObject: ""

  PythonDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: python-dependencies
      Description: Python dependencies for Recipe API
      ContentUri: ./python.zip
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/api/"
  CloudFrontEndpoint:
    Description: CloudFront distribution endpoint
    Value: !Sub "https://${ApiDistribution.DomainName}/"
  RecipesTableName:
    Description: Name of the DynamoDB table
    Value: !Ref RecipesTable
  RecipeImagesBucketName:
    Description: Name of the S3 bucket for recipe images
    Value: !Ref RecipeImagesBucket
  DeploymentBucketName:
    Description: Name of the S3 bucket for deployment artifacts
    Value: !Ref DeploymentBucket
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
  UserPoolDomain:
    Description: Cognito User Pool Domain
    Value: !Sub ${CognitoDomainPrefix}-${AWS::StackName}.auth.${AWS::Region}.amazoncognito.com
